<%- include('partials/header') %>
<%- include('partials/admin_nav') %>

<div class="container my-5">
    <h1 class="d-flex align-items-center gap-3 flex-wrap flex-column flex-md-row align-items-md-end">
        <span class="d-flex align-items-center gap-3"><%= post ? 'Beitrag bearbeiten' : 'Neuen Beitrag erstellen' %></span>
        <span class="small text-muted">/ Blog Editor</span>
    </h1>
    <form action="<%= post ? '/admin/posts/edit/' + post.id : '/admin/posts/new' %>" method="POST" onsubmit="return syncEditors()" class="row g-4">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
        <div class="col-lg-8">
            <!-- Featured Image Block -->
            <div class="mb-4" id="featuredBlock">
                    <label class="form-label mb-2 d-flex flex-wrap gap-3 align-items-center"><strong>Titelbild</strong>
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="inlineSelectFeaturedBtn"><i class="bi bi-image"></i> Wählen</button>
                        <span class="small text-muted" id="featuredStatusHint"><%= post && post.featured_image_id ? 'Ausgewählt' : 'Kein Bild' %></span>
                    </label>
                    <input type="hidden" name="featured_image_id" id="featured_image_id" value="<%= post ? (post.featured_image_id || '') : '' %>">
                    <div id="featuredDrop" class="border border-dashed rounded position-relative p-3 text-center" style="min-height:150px;background:linear-gradient(135deg,#f8f9fa,#f1f3f5);">
                        <div class="featured-inner h-100 d-flex flex-column justify-content-center align-items-center <%= post && post.featured_image_id ? 'd-none' : '' %>" id="featuredEmptyState">
                            <div class="text-muted"><i class="bi bi-cloud-arrow-up" style="font-size:2rem;"></i></div>
                            <div class="small text-muted">Bild hierher ziehen oder auf Wählen klicken.</div>
                        </div>
                        <div class="featured-preview h-100 <%= post && post.featured_image_id ? '' : 'd-none' %> position-relative" id="featuredPreviewWrapper">
                            <% if (post && post.featured_image_id) { %>
                                <img id="featuredPreview" src="<%= post.featured_image_path || '' %>" class="img-fluid rounded shadow-sm" style="max-height:240px;object-fit:cover;">
                            <% } else { %>
                                <img id="featuredPreview" class="img-fluid rounded d-none" style="max-height:240px;object-fit:cover;">
                            <% } %>
                            <div class="d-flex justify-content-start align-items-center mt-2 flex-wrap gap-3">
                                <div class="small text-muted" id="inlineFeaturedName"><%= post && post.featured_image_id ? (post.featured_image_path ? post.featured_image_path.split('/').pop() : '') : 'Keines gewählt' %></div>
                                <button type="button" class="btn btn-sm btn-outline-secondary" id="changeFeaturedBtn"><i class="bi bi-arrow-repeat"></i></button>
                                <button type="button" class="btn btn-sm btn-outline-secondary d-none" id="clearFeaturedBtn"><i class="bi bi-trash"></i></button>
                                <a href="#" id="clearFeaturedLink" class="small text-decoration-none text-danger ms-auto"><i class="bi bi-trash"></i> Entfernen</a>
                            </div>
                        </div>
                        <input type="file" id="featuredFileInput" accept="image/*" class="d-none">
                    </div>
            </div>
            <!-- Language Tabs -->
                <!-- Tabs für Sprachen -->
                <ul class="nav nav-tabs" id="langTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="de-tab" data-bs-toggle="tab" data-bs-target="#de-pane" type="button" role="tab">Deutsch</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="en-tab" data-bs-toggle="tab" data-bs-target="#en-pane" type="button" role="tab">Englisch</button>
                    </li>
                </ul>

                <div class="tab-content border border-top-0 p-3 mb-3 bg-white rounded-bottom">
                    <!-- Deutscher Inhalt -->
                    <div class="tab-pane fade show active" id="de-pane" role="tabpanel">
                        <div class="mb-3">
                            <label for="title_de" class="form-label">Titel (DE)</label>
                            <input type="text" class="form-control" id="title_de" name="title" value="<%= post ? post.title : '' %>" required>
                        </div>
                                                <div class="mb-3 position-relative">
                                                    <label for="tags" class="form-label">Tags (Komma-getrennt)</label>
                                                    <input type="text" class="form-control" id="tags" name="tags" value="<%= post && post.tags ? post.tags : '' %>" placeholder="security, purview, governance">
                                                    <% if (tagsList && tagsList.length) { %>
                                                    <div class="small mt-1">Vorschläge:
                                                        <% tagsList.forEach(function(t){ %>
                                                            <span class="badge bg-secondary tag-suggestion" data-tag="<%= t %>" style="cursor:pointer;"><%= t %></span>
                                                        <% }); %>
                                                    </div>
                                                    <% } %>
                                                </div>
                        <div class="mb-3">
                            <label class="form-label">Inhalt (DE)</label>
                            <div id="editor_de" class="border rounded p-2" style="min-height:300px;"></div>
                            <textarea id="content_de" name="content" class="d-none"><%= post ? post.content : '' %></textarea>
                            <div class="small text-muted mt-1 d-flex justify-content-between"><span>Max 2000 Zeichen (reiner Text)</span><span id="deContentCounter">0 / 2000</span></div>
                        </div>
                    </div>
                    <!-- Englischer Inhalt -->
                    <div class="tab-pane fade" id="en-pane" role="tabpanel">
                        <div class="mb-3">
                            <label for="title_en" class="form-label">Titel (EN)</label>
                            <input type="text" class="form-control" id="title_en" name="title_en" value="<%= post ? post.title_en : '' %>">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Inhalt (EN)</label>
                            <div id="editor_en" class="border rounded p-2" style="min-height:300px;"></div>
                            <textarea id="content_en" name="content_en" class="d-none"><%= post ? post.content_en : '' %></textarea>
                        </div>
                    </div>
                </div>
                                <button type="button" id="translateBtn" class="btn btn-secondary mb-3">Deutsch nach Englisch übersetzen</button>
        </div>
        <div class="col-lg-4">
            <!-- Publish Card -->
            <div class="card mb-4">
                    <div class="card-header">Veröffentlichen</div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="published_at" class="form-label">Veröffentlichungsdatum</label>
                            <input type="datetime-local" class="form-control" id="published_at" name="published_at" value="<%= post && post.published_at ? new Date(post.published_at).toISOString().slice(0,16) : '' %>">
                            <div class="form-text">Leer lassen für sofort oder später veröffentlichen.</div>
                        </div>
                        <div class="mb-3">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" name="status">
                                <option value="draft" <%= (post && post.status === 'draft') ? 'selected' : '' %>>Entwurf</option>
                                <option value="published" <%= (post && post.status === 'published') ? 'selected' : '' %>>Veröffentlicht</option>
                            </select>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Speichern</button>
                        </div>
                    </div>
                </div>
            <!-- AI Block direkt unter Publish -->
            <div class="card mb-4" id="aiBlock">
                    <div class="card-header d-flex flex-wrap gap-2 justify-content-between align-items-center">KI Assistent
                        <div class="btn-group btn-group-sm">
                            <button type="button" id="generate-whats-new-btn" class="btn btn-outline-primary" title="Füllt alle Felder mit aktuellen News">Research News</button>
                            <button type="button" id="generate-sample-btn" class="btn btn-outline-secondary" title="Beispieldaten einfügen">Sample</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <label class="form-label small mb-1">Kurz-Teaser (DE) (max 180 Zeichen)</label>
                        <textarea class="form-control mb-2" id="whatsnew" name="whatsnew" maxlength="180" rows="2" placeholder="Noch nichts..."><%= post ? post.whatsnew : '' %></textarea>
                        <div class="d-flex justify-content-between small text-muted"><span>Research News erzeugt Teaser. Sample befüllt nur den Inhalt.</span><span id="teaserCounter">0 / 180</span></div>
                    </div>
                </div>
            <!-- Embedded Media Library -->
            <div class="card" id="embeddedMediaLibBlog" style="max-width:100%;">
                <div class="card-header d-flex flex-wrap gap-2 justify-content-between align-items-center">
                    <strong>Medienbibliothek</strong>
                    <div class="d-flex gap-2 align-items-center flex-wrap">
                        <select class="form-select form-select-sm" id="embeddedMediaFilterBlog" style="width:170px;min-width:160px;">
                            <option value="all">Alle Kategorien</option>
                            <% if(mediaCats && mediaCats.length){ mediaCats.forEach(function(c){ %>
                                <option value="<%= c %>"><%= c %></option>
                            <% }) } %>
                        </select>
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="btnRefreshEmbeddedMediaBlog"><i class="bi bi-arrow-clockwise"></i></button>
                    </div>
                </div>
                                <div class="p-3 border-top" style="background:#fafafa;">
                                        <div class="px-1">
                            <div id="embeddedMediaGridBlog" class="row g-2 align-items-stretch" style="max-height:340px; overflow:auto; margin:0;"></div>
                                            <div class="small text-muted mt-2">Drag & Drop oder Klick kopiert Link / fügt ein.</div>
                                        </div>
                                </div>
            </div>
        </div>
        </div>
    </form>
</div>

<!-- Quill (Open Source Editor) -->
<link href="https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.snow.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.min.js"></script>
<style>
    #editor_de .ql-editor, #editor_en .ql-editor { min-height:260px; font-size:0.95rem; }
    #editor_de, #editor_en { background:#fff; }
    #editor_de:focus-within, #editor_en:focus-within { box-shadow:0 0 0 .2rem rgba(13,110,253,.25); }
</style>
<style>
.ql-img-wrap img{max-width:100%;height:auto;}
.ql-resize-handle{position:absolute;width:10px;height:10px;background:#0d6efd;border:1px solid #fff;border-radius:50%;box-shadow:0 0 2px rgba(0,0,0,.4);}
.ql-h-se{bottom:-5px;right:-5px;cursor:se-resize;}
.ql-h-e{top:50%;right:-5px;transform:translateY(-50%);cursor:e-resize;}
.ql-h-s{bottom:-5px;left:50%;transform:translateX(-50%);cursor:s-resize;}
</style>
<script>
let quillDe, quillEn;
function syncEditors(){
    if(quillDe){ document.getElementById('content_de').value = quillDe.root.innerHTML; }
    if(quillEn){ document.getElementById('content_en').value = quillEn.root.innerHTML; }
    return true;
}
document.addEventListener('DOMContentLoaded', () => {
    const toolbarOptions = [
        ['bold','italic','underline','strike'],
        [{ 'header': [1,2,3,false]}],
        [{'list':'ordered'},{'list':'bullet'}],
        [{ 'align': [] }],
        ['link','image','code-block'],
        [{ 'size': ['small', false, 'large', 'huge'] }],
        [{ 'color': [] }, { 'background': [] }]
    ];
    if(document.getElementById('editor_de')) quillDe = new Quill('#editor_de', { theme:'snow', modules:{ toolbar: toolbarOptions } });
    if(document.getElementById('editor_en')) quillEn = new Quill('#editor_en', { theme:'snow', modules:{ toolbar: toolbarOptions } });

    // (4) Drag & Drop / Paste Bild Upload (inline) für DE Editor
    function installInlineImageUpload(quill){
        const root = quill.root;
        root.addEventListener('drop', evt=>{
            if(!evt.dataTransfer || !evt.dataTransfer.files || !evt.dataTransfer.files.length) return;
            const file = [...evt.dataTransfer.files].find(f=>/^image\//.test(f.type));
            if(!file) return; evt.preventDefault(); inlineUpload(file, quill);
        });
        root.addEventListener('paste', evt=>{
            const items = (evt.clipboardData && evt.clipboardData.items) || [];
            for(const it of items){
                if(it.kind==='file'){ const f=it.getAsFile(); if(f && /^image\//.test(f.type)){ inlineUpload(f, quill); return; } }
            }
        });
    }
    async function inlineUpload(file, quill){
        const formData = new FormData(); formData.append('file', file);
        const sel = quill.getSelection(true) || { index: quill.getLength() };
        quill.insertText(sel.index, '[Bild wird hochgeladen…]', 'italic', true);
        try {
            const resp = await fetch('/admin/api/upload-inline-image', { method:'POST', body: formData, headers:{ 'CSRF-Token': window.CSRF_TOKEN } });
            const data = await resp.json();
            quill.deleteText(sel.index, '[Bild wird hochgeladen…]'.length);
            if(!resp.ok) throw new Error(data.error||'Upload fehlgeschlagen');
            quill.insertEmbed(sel.index, 'image', data.path, 'user');
            quill.setSelection(sel.index+1, 0);
        } catch(e){ console.error('Inline Upload Fehler', e); quill.deleteText(sel.index, '[Bild wird hochgeladen…]'.length); quill.insertText(sel.index, '[Upload Fehler]', 'bold', true); }
    }
    if(quillDe) installInlineImageUpload(quillDe);
    if(quillEn) installInlineImageUpload(quillEn);

    // (5) Medien-Browser Button in Toolbar (fügt Bild aus Auswahl ein)
    function addMediaPickerButton(quill){
        const toolbar = quill.getModule('toolbar'); if(!toolbar) return;
        const btn = document.createElement('button'); btn.type='button'; btn.innerHTML='📁'; btn.title='Bild aus Medienbibliothek einfügen'; btn.className='ql-media-picker';
        btn.addEventListener('click',()=>{
            // Re-Use eingebettete Grid: wähle erstes sichtbares Bild oder Klicke -> besser: kleines Overlay
            const picker = document.createElement('div'); picker.className='position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center'; picker.style.background='rgba(0,0,0,.6)'; picker.style.zIndex=1080;
            picker.innerHTML = `<div class="bg-white rounded shadow p-3" style="max-width:800px; width:90%; max-height:70vh; overflow:auto;">
                <div class='d-flex justify-content-between align-items-center mb-2'><strong>Bild wählen</strong><button class='btn btn-sm btn-outline-secondary' data-close>Schließen</button></div>
                <div id='mediaPickerGrid' class='row g-2'></div>
            </div>`;
            document.body.appendChild(picker);
            picker.addEventListener('click', e=>{ if(e.target.hasAttribute('data-close') || e.target===picker){ picker.remove(); }});
            fetch('/admin/api/media').then(r=>r.json()).then(list=>{
                const grid = picker.querySelector('#mediaPickerGrid');
                list.filter(m=>/^image\//.test(m.type||'')).slice(0,300).forEach(m=>{
                    const col=document.createElement('div'); col.className='col-3';
                    col.innerHTML=`<div class='border rounded p-1 h-100 d-flex flex-column' style='cursor:pointer;'><img src='${m.path}' class='img-fluid rounded mb-1' style='object-fit:cover;max-height:90px;'><small class='text-truncate'>${m.name||m.path.split('/').pop()}</small></div>`;
                    col.addEventListener('click',()=>{ const range=quill.getSelection(true)||{index:quill.getLength()}; quill.insertEmbed(range.index,'image', m.path,'user'); quill.setSelection(range.index+1,0); picker.remove(); });
                    grid.appendChild(col);
                });
            }).catch(()=>{});
        });
        const group = toolbar.container.querySelector('.ql-formats');
        (group?group:toolbar.container).appendChild(btn);
    }
    if(quillDe) addMediaPickerButton(quillDe);
    if(quillEn) addMediaPickerButton(quillEn);

    // (6) (Deaktiviert) Paste Cleanup vorerst entfernt wegen Parser Konflikten – kann später mit externer JS-Datei sauberer rein.

    // (7) Auto Teaser Ableitung
    const teaserTxt = document.getElementById('whatsnew');
    const teaserCounter = document.getElementById('teaserCounter');
    function updateTeaserCounter(){ if(teaserCounter && teaserTxt){ teaserCounter.textContent = teaserTxt.value.length+" / 180"; } }
    if(teaserTxt){ teaserTxt.addEventListener('input',()=>{ if(teaserTxt.value.length>180) teaserTxt.value = teaserTxt.value.slice(0,180); updateTeaserCounter(); }); updateTeaserCounter(); }
    const autoBtn = document.createElement('button');
    autoBtn.type='button'; autoBtn.className='btn btn-sm btn-outline-secondary ms-2'; autoBtn.textContent='Teaser ableiten';
    autoBtn.addEventListener('click', ()=>{
        const MAX_T=180;
        const text = quillDe ? quillDe.getText().trim() : '';
        if(!text){ teaserTxt.value=''; updateTeaserCounter(); return; }
        // Erster Absatz oder erste 400 Zeichen
        let firstPara = text.split(/\n+/)[0].trim();
        if(firstPara.length < 20){ firstPara = text.slice(0,400); }
        if(firstPara.length > MAX_T){
            let cut = firstPara.slice(0,MAX_T);
            const lastSpace = cut.lastIndexOf(' ');
            if(lastSpace>120) cut = cut.slice(0,lastSpace);
            firstPara = cut + '…';
        }
        teaserTxt.value = firstPara.slice(0,MAX_T);
        updateTeaserCounter();
    });
    const teaserLabel = document.querySelector('label.form-label.small');
    if(teaserLabel && teaserLabel.parentElement){ teaserLabel.parentElement.querySelector('textarea')?.insertAdjacentElement('beforebegin', autoBtn); }

    // Erweiterte Bildgrößenanpassung: Drag Handles + Doppelklick-Zyklus
    function addHandles(img){
        if(img.closest('.ql-img-wrap')) return;
        const wrap=document.createElement('span'); wrap.className='ql-img-wrap position-relative d-inline-block';
        img.parentNode.insertBefore(wrap,img); wrap.appendChild(img);
        ['se','e','s'].forEach(dir=>{ const h=document.createElement('span'); h.className='ql-resize-handle ql-h-'+dir; h.dataset.dir=dir; wrap.appendChild(h); });
    }
    function setupResize(quill){
        quill.root.addEventListener('click', e=>{ const img=e.target.closest('img'); if(img) addHandles(img); });
        let active=null,startX,startW;
        quill.root.addEventListener('mousedown', e=>{ const h=e.target.closest('.ql-resize-handle'); if(!h) return; e.preventDefault(); active=h; startX=e.clientX; const img=h.parentElement.querySelector('img'); startW=img.getBoundingClientRect().width; document.body.style.userSelect='none'; });
        window.addEventListener('mousemove', e=>{ if(!active) return; const img=active.parentElement.querySelector('img'); const delta=e.clientX-startX; const newW=Math.max(40,startW+delta); img.style.width=newW+'px'; });
        window.addEventListener('mouseup', ()=>{ if(active){ active=null; document.body.style.userSelect=''; }});
        // Dblclick cycles preset widths
        quill.root.addEventListener('dblclick', e=>{ const img=e.target.closest('img'); if(!img) return; const sizes=['100%','75%','50%']; const current=img.getAttribute('data-size')||'100%'; let idx=sizes.indexOf(current); idx=(idx+1)%sizes.length; img.style.width=sizes[idx]; img.setAttribute('data-size',sizes[idx]); });
    }
    setupResize(quillDe); setupResize(quillEn);
    // Initial Content
    quillDe.root.innerHTML = document.getElementById('content_de').value;
    quillEn.root.innerHTML = document.getElementById('content_en').value;
    // Content (DE) Zeichenlimit (Plain Text 2000)
    const deCounter = document.getElementById('deContentCounter');
    function enforceDeLimit(){
        if(!quillDe) return; const txt = quillDe.getText().replace(/\n+$/,'');
        if(txt.length>2000){
            // Kürzen: hole Delta und baue neu aus gekürztem Plaintext (einfacher als Delta-Manipulation)
            const trimmed = txt.slice(0,2000);
            quillDe.setText(trimmed);
        }
        if(deCounter){ const cur = quillDe.getText().replace(/\n+$/,'').length; deCounter.textContent = cur + ' / 2000'; deCounter.classList.toggle('text-danger', cur>=2000); }
    }
    if(quillDe){ quillDe.on('text-change', enforceDeLimit); enforceDeLimit(); }

    // Übersetzen
    const translateBtn = document.getElementById('translateBtn');
    if(translateBtn){
        translateBtn.addEventListener('click', async () => {
            const titleDe = document.getElementById('title_de').value;
            const contentDe = quillDe.root.innerHTML;
            function setTranslate(label, cls){ translateBtn.textContent=label; if(cls){ translateBtn.classList.remove('btn-secondary','btn-danger','btn-success'); translateBtn.classList.add(cls);} }
            translateBtn.disabled = true; setTranslate('Sende Anfrage…');
            try {
                const response = await fetch('/admin/api/translate', { method:'POST', headers:{'Content-Type':'application/json','CSRF-Token': window.CSRF_TOKEN}, body: JSON.stringify({ text: `Translate the following German blog post title and HTML body into English. Keep basic HTML tags (p, strong, em, ul, ol, li, h1-h3, a, img) intact. Respond as JSON: { \"title\": \"...\", \"content\": \"...\" }.\n\nGerman Title: ${titleDe}\n\nGerman HTML Content:\n${contentDe}` }) });
                setTranslate('Antwort wird verarbeitet…');
                const result = await response.json();
                const translatedParts = JSON.parse(result.translation);
                document.getElementById('title_en').value = translatedParts.title || '';
                quillEn.root.innerHTML = translatedParts.content || '';
                setTranslate('Übersetzung eingefügt','btn-success');
                setTimeout(()=> setTranslate('Fertig','btn-success'), 400);
                setTimeout(()=>{ translateBtn.disabled=false; setTranslate('Deutsch nach Englisch übersetzen','btn-secondary'); }, 1600);
            } catch(e){
                console.error('Translate Fehler', e);
                alert('Übersetzung fehlgeschlagen.');
                setTranslate('Fehler','btn-danger');
                setTimeout(()=>{ translateBtn.disabled=false; setTranslate('Deutsch nach Englisch übersetzen','btn-secondary'); }, 1800);
            }
        });
    }
    // What's New Generator
    const whatsBtn = document.getElementById('generate-whats-new-btn');
    const sampleBtn = document.getElementById('generate-sample-btn');
    if(whatsBtn){
        whatsBtn.addEventListener('click', async ()=>{
            const original=whatsBtn.textContent;
            function setBtn(label, cls){ whatsBtn.textContent=label; if(cls){ whatsBtn.className='btn '+cls; } }
            whatsBtn.disabled=true; setBtn('⏳ Anfrage vorbereiten…','btn-outline-primary');
            const startTs = Date.now();
            try {
                setBtn('🚀 Sende an KI…','btn-outline-primary');
                const resp = await fetch('/admin/generate-whats-new',{method:'POST', headers:{'CSRF-Token': window.CSRF_TOKEN}});
                setBtn('📥 Antwort wird gelesen…','btn-outline-primary');
                const data = await resp.json();
                if(!resp.ok) throw new Error(data.error||'Fehler');
                setBtn('🧪 Verarbeite Inhalt…','btn-outline-primary');
                document.getElementById('title_de').value = data.title_de||'Ohne Titel';
                let content = data.content_de || '';
                if(!content && data.parse_error && data.raw){ content = data.raw; }
                if(!content) content='<p><em>(Keine Inhaltsdaten erhalten)</em></p>';
                // Teaser NICHT überschreiben (Anforderung)
                // Sanitize rudimentär (Strip script)
                content = content.replace(/<script[\s\S]*?<\/script>/gi,'');
                quillDe.root.innerHTML = content; enforceDeLimit();
                document.getElementById('title_en').value = '';
                quillEn.root.innerHTML = '';
                updateTeaserCounter();
                const dur = ((Date.now()-startTs)/1000).toFixed(1)+'s';
                setBtn('✅ Fertig ('+dur+')','btn-success');
                setTimeout(()=>{ whatsBtn.disabled=false; setBtn(original,'btn-outline-primary'); },1800);
            } catch(e){
                console.error('WhatsNew Fehler', e);
                setBtn('⚠️ Fehler: '+(e.message||'') ,'btn-danger');
                setTimeout(()=>{ whatsBtn.disabled=false; setBtn(original,'btn-outline-primary'); },3000);
            }
        });
    }
    if(sampleBtn){
        sampleBtn.addEventListener('click', async ()=>{
            const original=sampleBtn.textContent;
            function setBtn(label, cls){ sampleBtn.textContent=label; if(cls){ sampleBtn.className='btn '+cls; } }
            sampleBtn.disabled=true; setBtn('⏳ Anfrage…','btn-outline-secondary');
            const startTs=Date.now();
            try {
                setBtn('🚀 Sende…','btn-outline-secondary');
                const resp = await fetch('/admin/posts/generate-sample',{method:'POST', headers:{'CSRF-Token': window.CSRF_TOKEN}});
                setBtn('📥 Lesen…','btn-outline-secondary');
                const data = await resp.json();
                if(!resp.ok) throw new Error(data.error||'Fehler');
                setBtn('🧪 Aufbereiten…','btn-outline-secondary');
                let content = data.content_de || '';
                if((!content || !data.title_de) && data.parse_error && data.raw){
                    try { const retry = JSON.parse(data.raw); if(!data.title_de && retry.title_de) data.title_de=retry.title_de; if(!content && retry.content_de) content=retry.content_de; } catch(_) { if(!content) content='<p>'+ (data.raw||'') + '</p>'; }
                }
                if(!content){ content='<p><em>(Keine Inhaltsdaten erhalten)</em></p>'; }
                content = content.replace(/<script[\s\S]*?<\/script>/gi,'');
                if(data.title_de){ document.getElementById('title_de').value = data.title_de; }
                if(content){ quillDe.root.innerHTML = content; enforceDeLimit(); }
                document.getElementById('title_en').value = '';
                quillEn.root.innerHTML = '';
                updateTeaserCounter();
                const dur = ((Date.now()-startTs)/1000).toFixed(1)+'s';
                setBtn('✅ Fertig ('+dur+')','btn-success');
                setTimeout(()=>{ sampleBtn.disabled=false; setBtn(original,'btn-outline-secondary'); },1800);
            }catch(e){
                console.error('Sample Fehler', e);
                setBtn('⚠️ Fehler: '+(e.message||'') ,'btn-danger');
                setTimeout(()=>{ sampleBtn.disabled=false; setBtn(original,'btn-outline-secondary'); },3000);
            }
        });
    }
    // Featured Image: Drag & Drop + Auswahl über Media Library
    const featuredDrop = document.getElementById('featuredDrop');
    const featuredInputHidden = document.getElementById('featured_image_id');
    const featuredPreviewWrap = document.getElementById('featuredPreviewWrapper');
    const featuredEmpty = document.getElementById('featuredEmptyState');
    const featuredImg = document.getElementById('featuredPreview');
    const inlineSelectFeaturedBtn = document.getElementById('inlineSelectFeaturedBtn');
    const inlineClearFeaturedBtn = document.getElementById('inlineClearFeaturedBtn'); // removed in UI (legacy)
    const clearFeaturedLink = document.getElementById('clearFeaturedLink');
    const featuredStatusHint = document.getElementById('featuredStatusHint');
    const changeFeaturedBtn = document.getElementById('changeFeaturedBtn');
    const clearFeaturedBtn = document.getElementById('clearFeaturedBtn');
    const featuredName = document.getElementById('inlineFeaturedName');
    function setFeatured(id, path, filename){
        if(!id){
            featuredInputHidden.value='';
            featuredImg.classList.add('d-none');
            featuredPreviewWrap.classList.add('d-none');
            featuredEmpty.classList.remove('d-none');
            featuredName.textContent='Keines gewählt';
            if(featuredStatusHint) featuredStatusHint.textContent='Kein Bild';
            return;
        }
        featuredInputHidden.value=id;
        featuredImg.src=path;
        featuredImg.classList.remove('d-none');
        featuredPreviewWrap.classList.remove('d-none');
        featuredEmpty.classList.add('d-none');
        featuredName.textContent=filename||path.split('/').pop();
        if(featuredStatusHint) featuredStatusHint.textContent='Ausgewählt';
    }
    function openMediaFeatured(){
        if(typeof openMediaLibraryModal !== 'function'){ alert('Media Library nicht geladen'); return; }
    openMediaLibraryModal({ filter:'__featuredCombo', returnObject:true, callback:(media)=>{
            setFeatured(media.id, media.path || ('/uploads/'+media.filename), media.name || media.filename);
        }});
    }
    if(inlineSelectFeaturedBtn) inlineSelectFeaturedBtn.addEventListener('click', openMediaFeatured);
    if(changeFeaturedBtn) changeFeaturedBtn.addEventListener('click', openMediaFeatured);
    function clearFeatured(){ setFeatured('', '', ''); }
    if(inlineClearFeaturedBtn) inlineClearFeaturedBtn.addEventListener('click', clearFeatured);
    if(clearFeaturedBtn) clearFeaturedBtn.addEventListener('click', clearFeatured);
    if(clearFeaturedLink) clearFeaturedLink.addEventListener('click', (e)=>{ e.preventDefault(); clearFeatured(); });
    // Drag & Drop Support (Datei lokal -> temporär nur Preview, kein Upload auto)
    if(featuredDrop){
        ['dragenter','dragover'].forEach(ev=> featuredDrop.addEventListener(ev, e=>{ e.preventDefault(); featuredDrop.classList.add('border-primary'); }));
        ['dragleave','drop'].forEach(ev=> featuredDrop.addEventListener(ev, e=>{ e.preventDefault(); if(ev!=='drop') featuredDrop.classList.remove('border-primary'); }));
        featuredDrop.addEventListener('drop', e=>{
            featuredDrop.classList.remove('border-primary');
            const file = e.dataTransfer.files && e.dataTransfer.files[0];
            if(!file || !file.type.startsWith('image/')) return;
            const reader = new FileReader();
            reader.onload = ev => { featuredImg.src=ev.target.result; featuredImg.classList.remove('d-none'); featuredPreviewWrap.classList.remove('d-none'); featuredEmpty.classList.add('d-none'); featuredName.textContent=file.name; };
            reader.readAsDataURL(file);
            // Hinweis: Kein automatischer Upload – Nutzer kann später echtes Medienobjekt hochladen & auswählen.
        });
    }
});
</script>

<!-- Einfacher Crop Modal (Canvas) -->
<div class="modal fade" id="imageCropModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bild zuschneiden</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3">
                    <div class="col-md-8">
                        <canvas id="cropCanvas" style="max-width:100%; border:1px solid #ccc; background:#f8f9fa"></canvas>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Seitenverhältnis</label>
                        <select id="cropAspect" class="form-select form-select-sm mb-3">
                            <option value="16:9">16:9</option>
                            <option value="4:3">4:3</option>
                            <option value="1:1">1:1</option>
                            <option value="3:4">3:4</option>
                            <option value="9:16">9:16</option>
                            <option value="frei">Frei</option>
                        </select>
                        <p class="small text-muted">Ziehe mit der Maus ein Rechteck auf dem Bild. Speichern ersetzt das Original im Editor (nur inline, Datei bleibt unverändert).</p>
                        <button id="applyCropBtn" class="btn btn-sm btn-primary">Zuschneiden</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
// Einfacher Canvas Cropper (kein externes CDN, rein clientseitig – ersetzt Bild-DataURL)
let activeQuillImg = null; let startX, startY, endX, endY, isDrawing=false; let imgEl, imgBitmap; const cropCanvas=document.getElementById('cropCanvas'); const ctx=cropCanvas.getContext('2d');
function openCropperFor(img){
    activeQuillImg = img;
    imgEl = new Image();
    imgEl.onload = () => { cropCanvas.width = imgEl.naturalWidth; cropCanvas.height = imgEl.naturalHeight; draw(); }; imgEl.src = img.src;
    const m = new bootstrap.Modal(document.getElementById('imageCropModal')); m.show();
    startX=startY=endX=endY=null;
}
function draw(){ ctx.clearRect(0,0,cropCanvas.width,cropCanvas.height); if(imgEl) ctx.drawImage(imgEl,0,0); if(startX!=null && endX!=null){ ctx.strokeStyle='#0d6efd'; ctx.lineWidth=2; ctx.strokeRect(startX,startY,endX-startX,endY-startY); ctx.fillStyle='rgba(13,110,253,.15)'; ctx.fillRect(startX,startY,endX-startX,endY-startY);} }
cropCanvas.addEventListener('mousedown', e=>{ isDrawing=true; const r=cropCanvas.getBoundingClientRect(); startX=e.clientX-r.left; startY=e.clientY-r.top; endX=startX; endY=startY; draw(); });
cropCanvas.addEventListener('mousemove', e=>{ if(!isDrawing) return; const r=cropCanvas.getBoundingClientRect(); endX=e.clientX-r.left; endY=e.clientY-r.top; enforceAspect(); draw(); });
cropCanvas.addEventListener('mouseup', ()=>{ isDrawing=false; });
function enforceAspect(){ const aspectSel=document.getElementById('cropAspect').value; if(aspectSel==='frei'|| startX==null) return; const parts=aspectSel.split(':'); const aw=parseFloat(parts[0]); const ah=parseFloat(parts[1]); let w=endX-startX; let h=endY-startY; if(Math.abs(w)<5||Math.abs(h)<5) return; const target=h===0?0:(aw/ah); let cur=Math.abs(w/h); if(cur>target){ // zu breit -> anpassen
        w = Math.sign(w) * Math.abs(h*aw/ah);
    } else { h = Math.sign(h) * Math.abs(w*ah/aw); }
    endX = startX + w; endY = startY + h;
}
document.getElementById('applyCropBtn').addEventListener('click', ()=>{
    if(startX==null||endX==null||!activeQuillImg) return; const x=Math.min(startX,endX), y=Math.min(startY,endY), w=Math.abs(endX-startX), h=Math.abs(endY-startY); if(w<10||h<10) return; const out=document.createElement('canvas'); out.width=w; out.height=h; out.getContext('2d').drawImage(imgEl,x,y,w,h,0,0,w,h); activeQuillImg.src = out.toDataURL('image/png'); const modalEl=document.getElementById('imageCropModal'); bootstrap.Modal.getInstance(modalEl).hide(); });
// Hook: Doppelklick Bild öffnet Cropper
function attachCropper(quill){ quill.root.addEventListener('dblclick', e=>{ const image=e.target.closest('img'); if(image) openCropperFor(image); }); }
if(quillDe) attachCropper(quillDe); if(quillEn) attachCropper(quillEn);
// Tag suggestion click
document.querySelectorAll('.tag-suggestion').forEach(b=> b.addEventListener('click', ()=>{
    const input=document.getElementById('tags');
    const tag=b.dataset.tag; if(!input) return; const existing=(input.value||'').split(',').map(s=>s.trim()).filter(Boolean);
    if(!existing.includes(tag)){ existing.push(tag); input.value=existing.join(', '); }
}));
// Embedded media loader (blog)
const embGrid=document.getElementById('embeddedMediaGridBlog');
const embFilter=document.getElementById('embeddedMediaFilterBlog');
const embRefresh=document.getElementById('btnRefreshEmbeddedMediaBlog');
async function loadEmbeddedMediaBlog(){
    if(!embGrid) return; embGrid.innerHTML='<div class="col-12 text-center py-3 text-muted"><div class="spinner-border spinner-border-sm"></div></div>';
    let url='/admin/api/media'; const cat=embFilter.value; if(cat && cat!=='all') url+='?category='+encodeURIComponent(cat);
    try { const resp=await fetch(url); if(!resp.ok) throw new Error('HTTP '+resp.status); const data=await resp.json(); embGrid.innerHTML=''; if(!data.length){ embGrid.innerHTML='<div class="col-12 small text-muted">Keine Medien.</div>'; return; }
        data.slice(0,400).forEach(m=>{ if(!/^image\//.test(m.type||'')) return; const col=document.createElement('div'); col.className='col-4 col-sm-3 col-md-3'; const wrap=document.createElement('div'); wrap.className='position-relative border rounded bg-white p-1 h-100 d-flex flex-column'; wrap.style.cursor='grab'; wrap.draggable=true; const img=document.createElement('img'); img.src=m.path; img.alt=m.alt_text||''; img.className='img-fluid rounded mb-1 flex-grow-1'; img.style.objectFit='cover'; img.style.maxHeight='90px'; const btn=document.createElement('button'); btn.type='button'; btn.className='btn btn-sm btn-light border copy-link-btn'; btn.innerHTML='<i class="bi bi-clipboard"></i>'; btn.addEventListener('click',()=>{ navigator.clipboard.writeText(m.path).then(()=>{ btn.innerHTML='<i class="bi bi-check text-success"></i>'; setTimeout(()=>btn.innerHTML='<i class="bi bi-clipboard"></i>',1200); }); }); wrap.appendChild(img); wrap.appendChild(btn); col.appendChild(wrap); embGrid.appendChild(col); wrap.addEventListener('dragstart', ev=>{ ev.dataTransfer.setData('text/plain', m.path); ev.dataTransfer.effectAllowed='copy'; }); img.addEventListener('click',()=>{ if(quillDe){ const range=quillDe.getSelection(true)||{index:quillDe.getLength()}; quillDe.insertEmbed(range.index,'image',m.path,'user'); quillDe.setSelection(range.index+1,0);} }); });
    } catch(e){ embGrid.innerHTML='<div class="col-12 small text-danger">Fehler Laden</div>'; }
}
if(embGrid){ loadEmbeddedMediaBlog(); embFilter.addEventListener('change', loadEmbeddedMediaBlog); embRefresh.addEventListener('click', loadEmbeddedMediaBlog); }
</script>

<%- include('partials/footer') %>
