Projektdokumentation & Onboarding: Purview PandaDieses Dokument dient als zentrale Anlaufstelle für Entwickler, um die Struktur, die Architektur und die Kernkomponenten der "Purview Panda"-Webanwendung schnell zu verstehen.1. ProjektübersichtProjektname: Purview PandaZweck: Eine informative Website mit Blog, Podcast und interaktiven Inhalten zum Thema Datensicherheit und Microsoft Purview. Die Seite verfügt über einen öffentlichen Bereich und einen passwortgeschützten Admin-Bereich zur Inhaltsverwaltung.Technologie-Stack:Backend: Node.js mit dem Express.js FrameworkFrontend: EJS (Embedded JavaScript) als Template-Engine, Bootstrap 5 für das StylingDatenbank: MySQL (via Netcup Webhosting)Server-Umgebung: Netcup Webhosting 4000 mit Node.js-Unterstützung2. Wichtige Dateien & AnwendungsstrukturDie Verzeichnisstruktur ist klassisch für eine Express-Anwendung aufgebaut:server.js: Der Startpunkt der Anwendung. Diese Datei initialisiert den Express-Server, konfiguriert die Middleware (z.B. für Sessions, CSRF-Schutz, statische Dateien) und bindet die Routing-Dateien ein.db.js: Das Herz der Datenbankverbindung. Hier wird der MySQL-Connection-Pool mithilfe der Daten aus der .env-Datei erstellt. Alle Datenbankabfragen in der Anwendung laufen über dieses Modul./routes/: Dieser Ordner trennt die Anwendungslogik für verschiedene Bereiche.public.js: Definiert alle öffentlich zugänglichen URLs (z.B. /, /blog, /pandas-way). Hier wird die Logik für das Abrufen und Anzeigen von Inhalten für die Besucher implementiert.admin.js: Definiert alle URLs für den Admin-Bereich (z.B. /admin, /admin/posts/edit/:id). Dieses Modul kümmert sich um die Authentifizierung und die Logik zum Erstellen, Bearbeiten und Löschen von Inhalten./views/: Enthält alle EJS-Template-Dateien. Diese werden vom Server mit Daten aus der Datenbank befüllt und als fertige HTML-Seiten an den Browser des Nutzers gesendet./httpdocs/: Der "Document Root" des Webservers. Alle Dateien in diesem Ordner sind direkt über den Browser erreichbar. Hier liegen CSS-Dateien, clientseitiges JavaScript, Bilder, hochgeladene Medien und Audio-Dateien..env: Die Konfigurationszentrale. Diese Datei enthält alle sensiblen Daten und Umgebungsvariablen. Sie darf niemals im Git-Repository gespeichert werden.3. Datenbankstruktur (MySQL)Die Anwendung verwendet die MySQL-Datenbank k302164_PP_Data. Unten ist die aktuelle und korrekte Struktur beschrieben.usersZweck: Speichert die Anmeldedaten für den Admin-Bereich.Wichtige Spalten:id: Eindeutige ID des Benutzers (Primary Key).username: Der Anmeldename.password: Das gehashte Passwort (mit bcrypt erstellt).postsZweck: Enthält alle Blog-Beiträge. Diese Tabelle ist für eine mehrsprachige Website vorbereitet.Wichtige Spalten:id: Eindeutige ID des Beitrags.title, content: Titel und Hauptinhalt auf Deutsch.title_en, content_en: Titel und Hauptinhalt auf Englisch (optional).slug: Eine "schöne" URL-Version des Titels (z.B. drei-saeulen-datensicherheit).status: Der Veröffentlichungsstatus ('published' oder 'draft').featured_image_id: Verknüpfung zur media-Tabelle für das Beitragsbild (Foreign Key).author_id: Verknüpfung zum Autor in der users-Tabelle (Foreign Key).mediaZweck: Die Medienbibliothek. Speichert Informationen zu allen hochgeladenen Dateien (Bilder, etc.).Wichtige Spalten:id: Eindeutige ID der Mediendatei.name: Der Dateiname (z.B. Panda_Knight.png).path: Der relative Pfad zur Datei im /httpdocs-Ordner (z.B. /uploads/1755288515495-Panda_Knight.png).alt_text: Alternativtext für Bilder (wichtig für SEO und Barrierefreiheit).podcastsZweck: Verwaltung der Podcast-Episoden.Wichtige Spalten:id: Eindeutige ID der Episode.title, description: Titel und Beschreibung der Episode.audio_url: Der Pfad zur M4A-Audiodatei.pandas_way_levelsZweck: Speichert die einzelnen HTML-Inhaltsblöcke für die interaktive Seite "Panda's Way".Wichtige Spalten:id: Eindeutige ID des Levels/Abschnitts.title: Der Titel des Abschnitts (z.B. "Level 1: Die Grundlagen").content: Der vollständige HTML-Code für diesen Abschnitt.display_order: Legt die Reihenfolge der Abschnitte auf der Seite fest.sessionsZweck: Diese Tabelle wird von express-session automatisch verwaltet, um Benutzer-Logins über mehrere Seitenaufrufe hinweg aktiv zu halten.4. Nächste Schritte & EmpfehlungenCode-Anpassung (höchste Priorität):Aufgabe: Die Routen in routes/admin.js und routes/public.js müssen vollständig an die oben beschriebene MySQL-Struktur angepasst werden. Alle Datenbankabfragen (pool.query(...)) müssen so umgeschrieben werden, dass sie die korrekten Tabellen- und Spaltennamen verwenden.Beispiel: Eine Abfrage für alle Blog-Beiträge muss SELECT * FROM posts WHERE status = 'published' lauten und nicht versuchen, auf eine Tabelle posts_content zuzugreifen.Fehlerbehebung (folgt aus 1):CSRF-Fehler beim Upload: Sobald die Admin-Seiten wieder laden, können wir den CSRF-Fehler im Upload-Formular beheben, indem wir das Token korrekt einfügen.Leere öffentliche Seiten: Wenn die Abfragen in public.js korrigiert sind, werden die Inhalte automatisch auf den Seiten angezeigt.Aufräumen:Aufgabe: Löschen Sie die veralteten .db-Dateien (posts.db, media.db etc.) und das alte migrate.js-Skript aus dem Projektverzeichnis, um Verwirrung zu vermeiden.
