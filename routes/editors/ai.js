const express = require('express');
const router = express.Router();
const { pool, isEditor } = require('./_shared');
const { generateWhatsNew, generateSampleArticle, translateDeToEn, generatePodcastMetadata } = require('../../lib/aiHelpers');

router.post('/generate-whats-new', isEditor, async (req,res)=>{ try { const data = await generateWhatsNew(); res.json(data); } catch(e){ if(e.message==='NO_API_KEY') return res.status(503).json({ error:'AI Service nicht konfiguriert' }); res.status(500).json({ error:'AI Fehler', detail:e.message }); } });
router.post('/posts/generate-sample', isEditor, async (req,res)=>{ try { const data=await generateSampleArticle(); res.json(data); } catch(e){ if(e.message==='NO_API_KEY') return res.status(503).json({ error:'AI Service nicht konfiguriert' }); res.status(500).json({ error:'AI Fehler', detail:e.message }); } });
router.post('/api/translate', isEditor, async (req,res)=>{ try { const { text }=req.body||{}; if(!text) return res.status(400).json({ error:'text fehlt' }); const matchTitle=text.match(/German Title:\s*(.*)\n/); const title=matchTitle?matchTitle[1].trim():''; const body=text.split(/German HTML Content:/)[1]||''; const data=await translateDeToEn(title, body); res.json({ translation: JSON.stringify({ title: data.title || data.title_en || data.title_de || '', content: data.content || data.content_en || '' }), raw:data.raw, parse_error:data.parse_error }); } catch(e){ if(e.message==='NO_API_KEY') return res.status(503).json({ error:'AI Service nicht konfiguriert' }); res.status(500).json({ error:'AI Fehler', detail:e.message }); } });
router.post('/podcasts/:id/ai-metadata', isEditor, async (req,res)=>{ try { const [[pod]] = await pool.query('SELECT * FROM podcasts WHERE id=?',[req.params.id]); if(!pod) return res.status(404).json({ error:'Podcast nicht gefunden' }); const md = await generatePodcastMetadata(pod.title, pod.description||''); if(md.seo_title || md.seo_description){ await pool.query('UPDATE podcasts SET seo_title=COALESCE(?,seo_title), seo_description=COALESCE(?,seo_description), meta_keywords=COALESCE(?,meta_keywords) WHERE id=?',[md.seo_title, md.seo_description, md.meta_keywords, pod.id]); } res.json(md); } catch(e){ if(e.message==='NO_API_KEY') return res.status(503).json({ error:'AI Service nicht konfiguriert' }); res.status(500).json({ error:'AI Fehler', detail:e.message }); } });

module.exports = router;
